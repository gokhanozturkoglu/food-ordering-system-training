server:
  port: 8181

logging:
  level:
    com.food.ordering.system: DEBUG

order-service:
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response
  customer-topic-name: customer
  outbox-scheduler-fixed-rate: 10000
  outbox-scheduler-initial-delay: 10000

spring:
  jpa:
    open-in-view: false #defaultta true ; true olması sürekli jdbc connection açık olmasına neden olur ; herhangi bir model önyüzde kullanılmayacaksa false olarak bırakılmalı
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
    platform: postgres
    schema: classpath:init-schema.sql
    initialization-mode: always

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081 #kafka_cluster.yml da schema regisrty port 8081 verdik
  num-of-partitions: 3  # 3 partitionı 3 tane concurrent kafka consumerda daha iyi scale ederiz.
  replication-factor: 3  # data 3 consumer içinde 3 farklı partitionda yer alacaktır. Aynı zamanda 3 brokerımız var.

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy  # data compression type. Snappy Cpu kullanımı, sıkıştırma oranı, hız ve ağ kullanımında daha verimli. Diğerleri : Gzip, lz4, zstd
  acks: all  # producerin brokerlardan acknowledgement alacagını belirtir. Best practice: all ; Others: 1, 0
  batch-size: 16384  #default value
  batch-size-boost-factor: 100
  linger-ms: 5  # producer mesajı brokera iletmeden önce buffera ekler, buffer verilen süre dolarsa veya dolmazsa tüm mesajlar bir batch olarak gönderilir. Batchler sayesinde ağ trafiği azaltılır.
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  payment-consumer-group-id: payment-topic-consumer
  restaurant-approval-consumer-group-id: restaurant-approval-topic-consumer
  customer-group-id: customer-topic-consumer
  auto-offset-reset: earliest  # consumerun partitiondaki bir mesajı nereden okuyacağını belirtir. Earliest:Consumer mesajı en baştan okuyacağı anlamına gelir. Others: latest, none (offset bilgisi bulunamadığında hata fırlatır)
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000  # (10 sn) consumerdan bu süre içersinde cevap gelmezse consumer grouptan silinir
  heartbeat-interval-ms: 3000 # consumer (3 sn) de bir brokera ayakta olduğuna dair sinyal gönderecek
  max-poll-interval-ms: 300000 # consumerın datayı max işleme süresi
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576  # 1 MB
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150